// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewPaymentBridge extends ethereum.Event {
  get params(): NewPaymentBridge__Params {
    return new NewPaymentBridge__Params(this);
  }
}

export class NewPaymentBridge__Params {
  _event: NewPaymentBridge;

  constructor(event: NewPaymentBridge) {
    this._event = event;
  }

  get bridgeOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bridge(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentBridgeFactory extends ethereum.SmartContract {
  static bind(address: Address): PaymentBridgeFactory {
    return new PaymentBridgeFactory("PaymentBridgeFactory", address);
  }

  feeAmount(): BigInt {
    let result = super.call("feeAmount", "feeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeAmount", "feeAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payeeBridge(): Address {
    let result = super.call("payeeBridge", "payeeBridge():(address)", []);

    return result[0].toAddress();
  }

  try_payeeBridge(): ethereum.CallResult<Address> {
    let result = super.tryCall("payeeBridge", "payeeBridge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  template(): Address {
    let result = super.call("template", "template():(address)", []);

    return result[0].toAddress();
  }

  try_template(): ethereum.CallResult<Address> {
    let result = super.tryCall("template", "template():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreatePaymentBridgeCall extends ethereum.Call {
  get inputs(): CreatePaymentBridgeCall__Inputs {
    return new CreatePaymentBridgeCall__Inputs(this);
  }

  get outputs(): CreatePaymentBridgeCall__Outputs {
    return new CreatePaymentBridgeCall__Outputs(this);
  }
}

export class CreatePaymentBridgeCall__Inputs {
  _call: CreatePaymentBridgeCall;

  constructor(call: CreatePaymentBridgeCall) {
    this._call = call;
  }

  get _initData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreatePaymentBridgeCall__Outputs {
  _call: CreatePaymentBridgeCall;

  constructor(call: CreatePaymentBridgeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _template(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _payeeBridge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
