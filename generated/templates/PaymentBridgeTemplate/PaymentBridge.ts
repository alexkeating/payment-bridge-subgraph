// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Payment extends ethereum.Event {
  get params(): Payment__Params {
    return new Payment__Params(this);
  }
}

export class Payment__Params {
  _event: Payment;

  constructor(event: Payment) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PaymentBridge extends ethereum.SmartContract {
  static bind(address: Address): PaymentBridge {
    return new PaymentBridge("PaymentBridge", address);
  }

  daiAddress(): Address {
    let result = super.call("daiAddress", "daiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_daiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("daiAddress", "daiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  omnibridgeAddress(): Address {
    let result = super.call(
      "omnibridgeAddress",
      "omnibridgeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_omnibridgeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "omnibridgeAddress",
      "omnibridgeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wrapAndZapAddress(): Address {
    let result = super.call(
      "wrapAndZapAddress",
      "wrapAndZapAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_wrapAndZapAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wrapAndZapAddress",
      "wrapAndZapAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  xdaibridgeAddress(): Address {
    let result = super.call(
      "xdaibridgeAddress",
      "xdaibridgeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_xdaibridgeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "xdaibridgeAddress",
      "xdaibridgeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _treasuryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wrapAndZap(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _omnibridgeAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _xdaibridgeAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _daiAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}
